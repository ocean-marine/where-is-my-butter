# CLAUDE.md — nim (Next.js 15 + React 19 / Tailwind v4 / MDX)

本プロジェクトで Claude（AI コードアシスタント）に依頼する際の **作業原則・出力形式** を定義する。  
目的は「**最小限の変更で価値を出す**」こと。依頼時は本ドキュメントへの準拠を明示する。

---

## 0. プロジェクト要約（コンテキスト）
- Framework: **Next.js 15.1.1** (`app/` ルータ前提)
- Runtime: Node.js（特記なければ `next` 既定）
- UI: **React 19**, **Tailwind CSS v4**, **@tailwindcss/typography**, **tailwind-merge**
- MDX: **@next/mdx**, **@mdx-js/react**, **@mdx-js/loader**
- Theming: **next-themes**
- Icons: **lucide-react**
- Motion: **motion**
- Lint/Format: **ESLint v9 + eslint-config-next 15.1.1**, **Prettier 3 + prettier-plugin-tailwindcss**
- 依存関係は `package.json` 記載の **バージョン固定を尊重**（アップデート提案は別途 Issue 化）

---

## 1. 作業ポリシー（Minimal Impact Policy）
Claude は次を厳守すること。

1) **最小変更**  
   - 既存ファイルへの**必要箇所のみ**の編集に限定。新規ファイルは**不可避な場合のみ**。  
   - 既存 API/コンポーネントの契約（props/返り値/URL）は極力保持。

2) **依存関係は触らない**  
   - `package.json` の `dependencies` / `devDependencies` は**変更禁止**。  
   - 変更提案は **別 Issue** として箇条書きに留め、今回 PR には含めない。

3) **設計の一貫性**  
   - コードスタイルは ESLint/Prettier に従う（ローカル実行: `pnpm lint` / `pnpm format` 等、各環境に合わせて）。  
   - CSS は **Tailwind** を第一選択。独自 CSS は必要最小限。  
   - 条件付きクラスは **clsx**、競合解消は **tailwind-merge** を利用。

4) **MDX/コンテンツ**  
   - MDX は既存の `next-mdx` 設定に沿う。ショートコードや remark/rehype 追加は原則しない。  
   - 画像やリンク構造は現行の構文・パス規約に合わせる。

5) **アクセシビリティ & i18n 配慮（軽量）**  
   - `aria-*` やセマンティクスは可能な範囲で付与。文言は既存トーンに合わせる。  
   - 大規模な i18n 組み込みは提案のみに留める（実装は別 Issue）。

---

## 2. 依頼のしかた（プロンプト雛形）
Claude への依頼は以下のテンプレで行い、**出力形式**を指定する。

> **タスク**: 〜〜を追加/修正したい。  
> **制約**: 本 CLAUDE.md の **最小変更**ポリシー厳守。依存関係は一切変更しない。  
> **出力**: 下記「出力フォーマット」に完全準拠。  
> **確認観点**: Lint/Build 通過、既存ページへの副作用なし、UI 崩れがないこと。

---

## 3. 出力フォーマット（厳守）
Claude は**必ず**以下の順序・形式で出力すること。説明のための冗長な散文は最小に。

### 3.1 Plan（箇条書き・最大5項目）
- 何を、どのファイルのどの位置に、なぜ最小で触るかを **簡潔に**。

### 3.2 Changed Files（一覧）

: <reason-of-change (short)>

> ※ 新規ファイルは `(new)` を付与。やむを得ない場合のみ。

### 3.3 Unified Diff（必要箇所のみ）
- **unified diff（`diff --unified` 互換）** で、変更の最小差分のみを示す。  
- 1 ファイルごとにコードブロックを分ける。
- 既存コードは **必要行のみ** を文脈として含める（巨大差分禁止）。

例:
```diff
--- a/app/page.tsx
+++ b/app/page.tsx
@@ -12,6 +12,9 @@
 ...
+// 追加理由: XXXのラベルが欠落していたため a11y 向上
+<span className="sr-only">...</span>

3.4 Post-Change Checks（チェックリスト）
	•	pnpm lint 通過（または npm run lint）
	•	pnpm build 通過
	•	既存ページの主要 3 画面で UI 崩れなし（肉眼確認ポイントを列挙）
	•	MDX ページのレンダリングが維持されている

3.5 Rollback Notes（可逆性）
	•	元に戻す方法（差分単位）。新規ファイルがあれば削除コマンドも記載。

⸻

4. 実装リガイド（最小限の指針）
	•	Tailwind v4: @tailwindcss/postcss を使う現行構成を前提。ユーティリティ優先、カスタム CSS は局所化。
	•	Components: 既存のレイアウト/トークンに準拠。色・余白・タイポは既存スケールを再利用。
	•	Theming (next-themes): 既存テーマ切替の契約を尊重。新しい Theme Token は原則追加しない。
	•	Icons (lucide-react): 既存サイズ・ストローク幅を踏襲。
	•	Motion (motion): 既存のモーションパターンがあればそれを踏襲。新規アニメは 200–400ms 程度の控えめ設定を推奨。
	•	MDX: シンタックスハイライトは sugar-high 前提。MDX コンポーネント追加は避ける。
	•	Routing: ルーティング構成（app/）の大幅追加・再編は行わない。必要な場合のみネストを最小追加。

⸻

5. 変更が大きくなりそうな場合の扱い
	•	大規模改修・新規パターン導入・依存追加が必要と判断される場合、今回は実装せず:
	1.	問題の背景
	2.	最小での暫定対応案
	3.	理想実装案（次回以降）
	4.	想定コスト/リスク
を 「提案」 セクションに 5〜10 行で要約する。

⸻

6. 動作確認コマンド（参考）
	•	Lint: npm run lint
	•	Dev: npm run dev
	•	Build: npm run build

依頼のスコープ外でコマンドや設定の追加はしない。

⸻

7. 提出物の品質基準（軽量）
	•	既存設計の再発明禁止。再利用 > 追加 > 変更 > 削除 の順で検討。
	•	バンドルサイズ・CLS などの影響が懸念される場合は一言メモを残す（実装はしない）。
	•	スナップショットや画像の追加は原則行わない（必要時のみ 1 点）。

⸻

8. よくある依頼の例（出力は上記フォーマット準拠）
	•	ボタンの a11y ラベル追加（既存スタイルのまま）
	•	MDX の段落余白の微調整（Tailwind ユーティリティ 1 箇所）
	•	アイコンのサイズ統一（className 変更のみ）
	•	ダークテーマ時のコントラスト改善（既存トークンを用いた 1–2 クラス置換）

⸻

本ドキュメントは「作業の小ささ」を守るための契約書である。
Claude はここに記した形式と制約に 厳密に従って出力 すること。

